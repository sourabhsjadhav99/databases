db.collectionName.aggregate([])  === db.collectionName.find({})

$match==>
db.collectionName.aggregate([{$match:{favorite_fruit:"banana"}}])
db.person.aggregate([{$match:{tags:{$size:2}}}]) === db.person.find({tags:{$size:2}})
db.person.aggregate([{$match:{age:{$gt:30}}}])

$group==>
db.person.aggregate([{$group:{_id:"$gender"}}])
db.person.aggregate([{$group:{_id:"$company.location.country"}}])
db.person.aggregate([{$group:{_id:{age:"$age", gender:"$gender",favorite_fruit:"$favorite_fruit"}}}])

$match and $group==> 
order is important because output of first stage is transfer to next stage 

db.person.aggregate([{$match:{gender:"female"}},
{$group:{_id:{ eyeColor:"$eyeColor",age:"$age"}}}])

if group first then use math which included in group
db.person.aggregate([
{$group:{_id:{ eyeColor:"$eyeColor",age:"$age"}}},
{$match:{"_id.eyeColor":"blue","_id.age":20}}])


$count==>
db.person.aggregate([{$count:"allDocsCount"}]) === db.person.find().count()
db.person.aggregate([]).toArray().length
db.person.aggregate([]).itcount()


$count and $group===>
db.person.aggregate([
{$group:{_id:{ eyeColor:"$eyeColor",gender:"$gender"}}},
{$count:"eyeColorandGender"}])

$count, $match and $group
db.person.aggregate([
    {$match:{age:{$gte:25}}},
{$group:{_id:{ eyeColor:"$eyeColor",gender:"$gender"}}},
{$count:"eyeColorandGenderGreaterthan25"}])


$sort==>1=asscending order -1=descending order
db.person.aggregate([
{$sort:{age:1,gender:-1}}
])


$match $group and $sort==> order is important

db.person.aggregate([
    {$group:{_id:"$age"}},
{$sort:{_id:-1}}])

db.person.aggregate([
    {$group:{_id:{eyeColor:"$eyeColor",favoriteFruit:"$favoriteFruit"}}},
{$sort:{"_id.eyeColor":-1, "_id.favoriteFruit":1}}])

db.person.aggregate([
     {$match:{eyeColor:{$ne:"blue"}}},
    {$group:{_id:{eyeColor:"$eyeColor",favoriteFruit:"$favoriteFruit"}}},
{$sort:{"_id.eyeColor":1, "_id.favoriteFruit":-1}}])

$project==> specific documents, 0=document not appeared 1= document appeared
db.person.aggregate([
     {$project:{isActive:1, name:1, gender:1, _id:0}},
 ])

if all values are0 then all fields except mentioned are appeared
db.person.aggregate([
     {$project:{isActive:0, name:0, gender:0}},
 ])


db.person.aggregate([
     {$project:{
        _id:0,
        index:1,
        name:1,
        info:{
            eyes:"$eyeColor",
            company:"$company.title",
            country:"$company.location.country"
        }
     }},
 ])


$limit==>take 100 documents
db.person.aggregate([
    {$limit:100},
     {$match:{age:{$gt:27}}},
    {$group:{_id:{eyeColor:"$eyeColor"}}}
])


$unwind ==> for array operations(like split in js)

$unwind and $project===> multiple documents for each element of array
db.person.aggregate([
    {$unwind:"$tags},
     {$project:{name:1,gender:1, tags:1}},
])

$unwind and $group===> 
db.person.aggregate([
    {$unwind:"$tags},
     {$group:{_id:"$tags"}},
])

$sum, $avg, $max, $min==>

$sum==>
db.person.aggregate([
     {$group:{_id:"$age", count:{$sum:1}}}
])

$sum, $group, $unwind==>
db.person.aggregate([
    {$unwind:"$tags"},
     {$group:{_id:"$tags", count:{$sum:NumberInt(1)}}},
])

$avg=>
db.person.aggregate([
     {$group:{_id:"$eyeColor", avgAge:{$avg:"$age"}}},
])


$type===>
db.person.aggregate([{
$project:{name:1, eyeColor:{$type:"$eyeColor"}, age:{$type:"$age"}}
}
])


$out===>
db.person.aggregate([{
$project:{name:1, age:{$type:"$age"}}
},
{$out:"OutResults"}
])


db.person.aggregate([
     {$unwind:"$tags"},
{$group:{
    _id:"$tags",
    names:{$push:"$name"}
}}
])
